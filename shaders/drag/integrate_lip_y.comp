#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(r32f) uniform image2D u_potOut;
layout(rg32f) uniform image2D u_lipIn;
uniform int u_scale;

void main() {
    ivec2 potSize = imageSize(u_potOut);
    ivec2 layerSize = imageSize(u_lipIn);

    int ix = int(gl_GlobalInvocationID.x);
    int ib = 2 * int(gl_GlobalInvocationID.y);

    // ix < layerSize.x shouldn't be necessary for integrate_lip_y
    // It's included mostly to be analogous with integrate_lip_x
    if (ib < layerSize.y - 2 && ix < layerSize.x) {
        int it = ib + 1;
        int x = min(ix * u_scale, potSize.x - 1);
        int y = it * u_scale;

        float diffBot = imageLoad(u_lipIn, ivec2(ix, ib)).y;
        float diffTop = imageLoad(u_lipIn, ivec2(ix, it)).y;

        float potBot = imageLoad(u_potOut, ivec2(x, y - u_scale)).r;
        float potTop = imageLoad(u_potOut, ivec2(x, min(y + u_scale, potSize.y - 1))).r;

        float result = 0.5 * (potBot + diffBot) + 0.5 * (potTop - diffTop);
        imageStore(u_potOut, ivec2(x, y), vec4(result, 0., 0., 1.));
    }
}
